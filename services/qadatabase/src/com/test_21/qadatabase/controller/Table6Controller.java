/*Copyright (c) 2016-2017 testing1.com All Rights Reserved.
 This software is the confidential and proprietary information of testing1.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing1.com*/
package com.test_21.qadatabase.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.test_21.qadatabase.service.Table5Service;
import com.test_21.qadatabase.service.Table6Service;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.test_21.qadatabase.*;
import com.test_21.qadatabase.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table6.
 * @see com.test_21.qadatabase.Table6
 */
@RestController(value = "Qadatabase.Table6Controller")
@RequestMapping("/qadatabase/Table6")
@Api(description = "Exposes APIs to work with Table6 resource.", value = "Table6Controller")
public class Table6Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table6Controller.class);

    @Autowired
    @Qualifier("qadatabase.Table6Service")
    private Table6Service table6Service;

    @Autowired
    @Qualifier("qadatabase.Table5Service")
    private Table5Service table5Service;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table6 instances matching the search criteria.")
    public Page<Table6> findTable6s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table6s list");
        return table6Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table6 instances.")
    public Page<Table6> getTable6s(Pageable pageable) {
        LOGGER.debug("Rendering Table6s list");
        return table6Service.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/table5s", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the table5s instance associated with the given id.")
    public Page<Table5> findAssociatedtable5s(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated table5s");
        return table5Service.findAssociatedValues(id, "table6", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setTable6Service(Table6Service service) {
        this.table6Service = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table6 instance.")
    public Table6 createTable6(@RequestBody Table6 instance) {
        LOGGER.debug("Create Table6 with information: {}", instance);
        instance = table6Service.create(instance);
        LOGGER.debug("Created Table6 with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table6 instances.")
    public Long countAllTable6s() {
        LOGGER.debug("counting Table6s");
        Long count = table6Service.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table6 instance associated with the given id.")
    public Table6 getTable6(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table6 with id: {}", id);
        Table6 instance = table6Service.findById(id);
        LOGGER.debug("Table6 details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table6 instance associated with the given id.")
    public Table6 editTable6(@PathVariable(value = "id") Integer id, @RequestBody Table6 instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Table6 with id: {}", instance.getId());
        instance.setId(id);
        instance = table6Service.update(instance);
        LOGGER.debug("Table6 details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table6 instance associated with the given id.")
    public boolean deleteTable6(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table6 with id: {}", id);
        Table6 deleted = table6Service.delete(id);
        return deleted != null;
    }
}
