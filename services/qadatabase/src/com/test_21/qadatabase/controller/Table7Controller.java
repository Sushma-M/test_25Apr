/*Copyright (c) 2016-2017 testing1.com All Rights Reserved.
 This software is the confidential and proprietary information of testing1.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing1.com*/
package com.test_21.qadatabase.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.test_21.qadatabase.service.Table7Service;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.test_21.qadatabase.*;
import com.test_21.qadatabase.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table7.
 * @see com.test_21.qadatabase.Table7
 */
@RestController(value = "Qadatabase.Table7Controller")
@RequestMapping("/qadatabase/Table7")
@Api(description = "Exposes APIs to work with Table7 resource.", value = "Table7Controller")
public class Table7Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table7Controller.class);

    @Autowired
    @Qualifier("qadatabase.Table7Service")
    private Table7Service table7Service;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table7 instances matching the search criteria.")
    public Page<Table7> findTable7s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table7s list");
        return table7Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table7 instances.")
    public Page<Table7> getTable7s(Pageable pageable) {
        LOGGER.debug("Rendering Table7s list");
        return table7Service.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setTable7Service(Table7Service service) {
        this.table7Service = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table7 instance.")
    public Table7 createTable7(@RequestBody Table7 instance) {
        LOGGER.debug("Create Table7 with information: {}", instance);
        instance = table7Service.create(instance);
        LOGGER.debug("Created Table7 with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table7 instances.")
    public Long countAllTable7s() {
        LOGGER.debug("counting Table7s");
        Long count = table7Service.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table7 instance associated with the given id.")
    public Table7 getTable7(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table7 with id: {}", id);
        Table7 instance = table7Service.findById(id);
        LOGGER.debug("Table7 details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table7 instance associated with the given id.")
    public Table7 editTable7(@PathVariable(value = "id") Integer id, @RequestBody Table7 instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Table7 with id: {}", instance.getId());
        instance.setId(id);
        instance = table7Service.update(instance);
        LOGGER.debug("Table7 details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table7 instance associated with the given id.")
    public boolean deleteTable7(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table7 with id: {}", id);
        Table7 deleted = table7Service.delete(id);
        return deleted != null;
    }
}
