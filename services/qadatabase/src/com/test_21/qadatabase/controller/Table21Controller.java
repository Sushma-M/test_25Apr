/*Copyright (c) 2016-2017 testing1.com All Rights Reserved.
 This software is the confidential and proprietary information of testing1.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing1.com*/
package com.test_21.qadatabase.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.test_21.qadatabase.service.Table21Service;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.test_21.qadatabase.*;
import com.test_21.qadatabase.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table21.
 * @see com.test_21.qadatabase.Table21
 */
@RestController(value = "Qadatabase.Table21Controller")
@RequestMapping("/qadatabase/Table21")
@Api(description = "Exposes APIs to work with Table21 resource.", value = "Table21Controller")
public class Table21Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table21Controller.class);

    @Autowired
    @Qualifier("qadatabase.Table21Service")
    private Table21Service table21Service;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table21 instances matching the search criteria.")
    public Page<Table21> findTable21s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table21s list");
        return table21Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table21 instances.")
    public Page<Table21> getTable21s(Pageable pageable) {
        LOGGER.debug("Rendering Table21s list");
        return table21Service.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setTable21Service(Table21Service service) {
        this.table21Service = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table21 instance.")
    public Table21 createTable21(@RequestBody Table21 instance) {
        LOGGER.debug("Create Table21 with information: {}", instance);
        instance = table21Service.create(instance);
        LOGGER.debug("Created Table21 with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table21 instances.")
    public Long countAllTable21s() {
        LOGGER.debug("counting Table21s");
        Long count = table21Service.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table21 instance associated with the given id.")
    public Table21 getTable21(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table21 with id: {}", id);
        Table21 instance = table21Service.findById(id);
        LOGGER.debug("Table21 details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table21 instance associated with the given id.")
    public Table21 editTable21(@PathVariable(value = "id") Integer id, @RequestBody Table21 instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Table21 with id: {}", instance.getId());
        instance.setId(id);
        instance = table21Service.update(instance);
        LOGGER.debug("Table21 details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table21 instance associated with the given id.")
    public boolean deleteTable21(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table21 with id: {}", id);
        Table21 deleted = table21Service.delete(id);
        return deleted != null;
    }
}
