/*Copyright (c) 2016-2017 testing1.com All Rights Reserved.
 This software is the confidential and proprietary information of testing1.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing1.com*/

package com.test_21.qadatabase.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_21.qadatabase.*;


/**
 * ServiceImpl object for domain model class Customers.
 * @see com.test_21.qadatabase.Customers
 */
@Service("qadatabase.CustomersService")
public class CustomersServiceImpl implements CustomersService {


    private static final Logger LOGGER = LoggerFactory.getLogger(CustomersServiceImpl.class);

    @Autowired
    @Qualifier("qadatabase.CustomersDao")
    private WMGenericDao<Customers, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Customers, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
     public Page<Customers> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "qadatabaseTransactionManager")
    @Override
    public Customers create(Customers customers) {
        LOGGER.debug("Creating a new customers with information: {}" , customers);
        return this.wmGenericDao.create(customers);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "qadatabaseTransactionManager")
    @Override
    public Customers delete(Integer customersId) throws EntityNotFoundException {
        LOGGER.debug("Deleting customers with id: {}" , customersId);
        Customers deleted = this.wmGenericDao.findById(customersId);
        if (deleted == null) {
            LOGGER.debug("No customers found with id: {}" , customersId);
            throw new EntityNotFoundException(String.valueOf(customersId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Page<Customers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all customerss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Page<Customers> findAll(Pageable pageable) {
        LOGGER.debug("Finding all customerss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Customers findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding customers by id: {}" , id);
        Customers customers=this.wmGenericDao.findById(id);
        if(customers==null){
            LOGGER.debug("No customers found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return customers;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "qadatabaseTransactionManager")
    @Override
    public Customers update(Customers updated) throws EntityNotFoundException {
        LOGGER.debug("Updating customers with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


