/*Copyright (c) 2016-2017 testing1.com All Rights Reserved.
 This software is the confidential and proprietary information of testing1.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing1.com*/

package com.test_21.qadatabase.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_21.qadatabase.*;

/**
 * Service object for domain model class Locations.
 * @see com.test_21.qadatabase.Locations
 */

public interface LocationsService {
   /**
	 * Creates a new locations.
	 * 
	 * @param created
	 *            The information of the created locations.
	 * @return The created locations.
	 */
	public Locations create(Locations created);

	/**
	 * Deletes a locations.
	 * 
	 * @param locationsId
	 *            The id of the deleted locations.
	 * @return The deleted locations.
	 * @throws EntityNotFoundException
	 *             if no locations is found with the given id.
	 */
	public Locations delete(Integer locationsId) throws EntityNotFoundException;

	/**
	 * Finds all locationss.
	 * 
	 * @return A list of locationss.
	 */
	public Page<Locations> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Locations> findAll(Pageable pageable);
	
	/**
	 * Finds locations by id.
	 * 
	 * @param id
	 *            The id of the wanted locations.
	 * @return The found locations. If no locations is found, this method returns
	 *         null.
	 */
	public Locations findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a locations.
	 * 
	 * @param updated
	 *            The information of the updated locations.
	 * @return The updated locations.
	 * @throws EntityNotFoundException
	 *             if no locations is found with given id.
	 */
	public Locations update(Locations updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the locationss in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the locations.
	 */

	public long countAll();


    public Page<Locations> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

