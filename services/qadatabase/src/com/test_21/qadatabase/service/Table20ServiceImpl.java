/*Copyright (c) 2016-2017 testing1.com All Rights Reserved.
 This software is the confidential and proprietary information of testing1.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing1.com*/

package com.test_21.qadatabase.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_21.qadatabase.*;


/**
 * ServiceImpl object for domain model class Table20.
 * @see com.test_21.qadatabase.Table20
 */
@Service("qadatabase.Table20Service")
public class Table20ServiceImpl implements Table20Service {


    private static final Logger LOGGER = LoggerFactory.getLogger(Table20ServiceImpl.class);

    @Autowired
    @Qualifier("qadatabase.Table20Dao")
    private WMGenericDao<Table20, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table20, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
     public Page<Table20> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "qadatabaseTransactionManager")
    @Override
    public Table20 create(Table20 table20) {
        LOGGER.debug("Creating a new table20 with information: {}" , table20);
        return this.wmGenericDao.create(table20);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "qadatabaseTransactionManager")
    @Override
    public Table20 delete(Integer table20Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting table20 with id: {}" , table20Id);
        Table20 deleted = this.wmGenericDao.findById(table20Id);
        if (deleted == null) {
            LOGGER.debug("No table20 found with id: {}" , table20Id);
            throw new EntityNotFoundException(String.valueOf(table20Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Page<Table20> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all table20s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Page<Table20> findAll(Pageable pageable) {
        LOGGER.debug("Finding all table20s");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Table20 findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding table20 by id: {}" , id);
        Table20 table20=this.wmGenericDao.findById(id);
        if(table20==null){
            LOGGER.debug("No table20 found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return table20;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "qadatabaseTransactionManager")
    @Override
    public Table20 update(Table20 updated) throws EntityNotFoundException {
        LOGGER.debug("Updating table20 with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


