/*Copyright (c) 2016-2017 testing1.com All Rights Reserved.
 This software is the confidential and proprietary information of testing1.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing1.com*/

package com.test_21.qadatabase.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_21.qadatabase.*;


/**
 * ServiceImpl object for domain model class Quotes.
 * @see com.test_21.qadatabase.Quotes
 */
@Service("qadatabase.QuotesService")
public class QuotesServiceImpl implements QuotesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(QuotesServiceImpl.class);

    @Autowired
    @Qualifier("qadatabase.QuotesDao")
    private WMGenericDao<Quotes, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Quotes, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
     public Page<Quotes> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "qadatabaseTransactionManager")
    @Override
    public Quotes create(Quotes quotes) {
        LOGGER.debug("Creating a new quotes with information: {}" , quotes);
        return this.wmGenericDao.create(quotes);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "qadatabaseTransactionManager")
    @Override
    public Quotes delete(Integer quotesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting quotes with id: {}" , quotesId);
        Quotes deleted = this.wmGenericDao.findById(quotesId);
        if (deleted == null) {
            LOGGER.debug("No quotes found with id: {}" , quotesId);
            throw new EntityNotFoundException(String.valueOf(quotesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Page<Quotes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all quotess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Page<Quotes> findAll(Pageable pageable) {
        LOGGER.debug("Finding all quotess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Quotes findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding quotes by id: {}" , id);
        Quotes quotes=this.wmGenericDao.findById(id);
        if(quotes==null){
            LOGGER.debug("No quotes found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return quotes;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "qadatabaseTransactionManager")
    @Override
    public Quotes update(Quotes updated) throws EntityNotFoundException {
        LOGGER.debug("Updating quotes with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


