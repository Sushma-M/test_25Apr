/*Copyright (c) 2016-2017 testing1.com All Rights Reserved.
 This software is the confidential and proprietary information of testing1.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing1.com*/

package com.test_21.qadatabase.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_21.qadatabase.*;


/**
 * ServiceImpl object for domain model class Table19.
 * @see com.test_21.qadatabase.Table19
 */
@Service("qadatabase.Table19Service")
public class Table19ServiceImpl implements Table19Service {


    private static final Logger LOGGER = LoggerFactory.getLogger(Table19ServiceImpl.class);

    @Autowired
    @Qualifier("qadatabase.Table19Dao")
    private WMGenericDao<Table19, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table19, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
     public Page<Table19> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "qadatabaseTransactionManager")
    @Override
    public Table19 create(Table19 table19) {
        LOGGER.debug("Creating a new table19 with information: {}" , table19);
        return this.wmGenericDao.create(table19);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "qadatabaseTransactionManager")
    @Override
    public Table19 delete(Integer table19Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting table19 with id: {}" , table19Id);
        Table19 deleted = this.wmGenericDao.findById(table19Id);
        if (deleted == null) {
            LOGGER.debug("No table19 found with id: {}" , table19Id);
            throw new EntityNotFoundException(String.valueOf(table19Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Page<Table19> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all table19s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Page<Table19> findAll(Pageable pageable) {
        LOGGER.debug("Finding all table19s");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Table19 findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding table19 by id: {}" , id);
        Table19 table19=this.wmGenericDao.findById(id);
        if(table19==null){
            LOGGER.debug("No table19 found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return table19;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "qadatabaseTransactionManager")
    @Override
    public Table19 update(Table19 updated) throws EntityNotFoundException {
        LOGGER.debug("Updating table19 with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


