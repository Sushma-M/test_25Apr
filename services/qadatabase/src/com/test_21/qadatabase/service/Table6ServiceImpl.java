/*Copyright (c) 2016-2017 testing1.com All Rights Reserved.
 This software is the confidential and proprietary information of testing1.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing1.com*/

package com.test_21.qadatabase.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_21.qadatabase.*;


/**
 * ServiceImpl object for domain model class Table6.
 * @see com.test_21.qadatabase.Table6
 */
@Service("qadatabase.Table6Service")
public class Table6ServiceImpl implements Table6Service {


    private static final Logger LOGGER = LoggerFactory.getLogger(Table6ServiceImpl.class);

    @Autowired
    @Qualifier("qadatabase.Table6Dao")
    private WMGenericDao<Table6, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table6, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
     public Page<Table6> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "qadatabaseTransactionManager")
    @Override
    public Table6 create(Table6 table6) {
        LOGGER.debug("Creating a new table6 with information: {}" , table6);
        return this.wmGenericDao.create(table6);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "qadatabaseTransactionManager")
    @Override
    public Table6 delete(Integer table6Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting table6 with id: {}" , table6Id);
        Table6 deleted = this.wmGenericDao.findById(table6Id);
        if (deleted == null) {
            LOGGER.debug("No table6 found with id: {}" , table6Id);
            throw new EntityNotFoundException(String.valueOf(table6Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Page<Table6> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all table6s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Page<Table6> findAll(Pageable pageable) {
        LOGGER.debug("Finding all table6s");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Table6 findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding table6 by id: {}" , id);
        Table6 table6=this.wmGenericDao.findById(id);
        if(table6==null){
            LOGGER.debug("No table6 found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return table6;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "qadatabaseTransactionManager")
    @Override
    public Table6 update(Table6 updated) throws EntityNotFoundException {
        LOGGER.debug("Updating table6 with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


