/*Copyright (c) 2016-2017 testing1.com All Rights Reserved.
 This software is the confidential and proprietary information of testing1.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing1.com*/

package com.test_21.qadatabase.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_21.qadatabase.*;


/**
 * ServiceImpl object for domain model class Table18.
 * @see com.test_21.qadatabase.Table18
 */
@Service("qadatabase.Table18Service")
public class Table18ServiceImpl implements Table18Service {


    private static final Logger LOGGER = LoggerFactory.getLogger(Table18ServiceImpl.class);

    @Autowired
    @Qualifier("qadatabase.Table18Dao")
    private WMGenericDao<Table18, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table18, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
     public Page<Table18> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "qadatabaseTransactionManager")
    @Override
    public Table18 create(Table18 table18) {
        LOGGER.debug("Creating a new table18 with information: {}" , table18);
        return this.wmGenericDao.create(table18);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "qadatabaseTransactionManager")
    @Override
    public Table18 delete(Integer table18Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting table18 with id: {}" , table18Id);
        Table18 deleted = this.wmGenericDao.findById(table18Id);
        if (deleted == null) {
            LOGGER.debug("No table18 found with id: {}" , table18Id);
            throw new EntityNotFoundException(String.valueOf(table18Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Page<Table18> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all table18s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Page<Table18> findAll(Pageable pageable) {
        LOGGER.debug("Finding all table18s");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Table18 findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding table18 by id: {}" , id);
        Table18 table18=this.wmGenericDao.findById(id);
        if(table18==null){
            LOGGER.debug("No table18 found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return table18;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "qadatabaseTransactionManager")
    @Override
    public Table18 update(Table18 updated) throws EntityNotFoundException {
        LOGGER.debug("Updating table18 with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


