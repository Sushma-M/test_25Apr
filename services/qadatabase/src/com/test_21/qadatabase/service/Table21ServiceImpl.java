/*Copyright (c) 2016-2017 testing1.com All Rights Reserved.
 This software is the confidential and proprietary information of testing1.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing1.com*/

package com.test_21.qadatabase.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_21.qadatabase.*;


/**
 * ServiceImpl object for domain model class Table21.
 * @see com.test_21.qadatabase.Table21
 */
@Service("qadatabase.Table21Service")
public class Table21ServiceImpl implements Table21Service {


    private static final Logger LOGGER = LoggerFactory.getLogger(Table21ServiceImpl.class);

    @Autowired
    @Qualifier("qadatabase.Table21Dao")
    private WMGenericDao<Table21, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table21, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
     public Page<Table21> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "qadatabaseTransactionManager")
    @Override
    public Table21 create(Table21 table21) {
        LOGGER.debug("Creating a new table21 with information: {}" , table21);
        return this.wmGenericDao.create(table21);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "qadatabaseTransactionManager")
    @Override
    public Table21 delete(Integer table21Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting table21 with id: {}" , table21Id);
        Table21 deleted = this.wmGenericDao.findById(table21Id);
        if (deleted == null) {
            LOGGER.debug("No table21 found with id: {}" , table21Id);
            throw new EntityNotFoundException(String.valueOf(table21Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Page<Table21> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all table21s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Page<Table21> findAll(Pageable pageable) {
        LOGGER.debug("Finding all table21s");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Table21 findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding table21 by id: {}" , id);
        Table21 table21=this.wmGenericDao.findById(id);
        if(table21==null){
            LOGGER.debug("No table21 found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return table21;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "qadatabaseTransactionManager")
    @Override
    public Table21 update(Table21 updated) throws EntityNotFoundException {
        LOGGER.debug("Updating table21 with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


