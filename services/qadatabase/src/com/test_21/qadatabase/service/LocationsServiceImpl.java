/*Copyright (c) 2016-2017 testing1.com All Rights Reserved.
 This software is the confidential and proprietary information of testing1.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with testing1.com*/

package com.test_21.qadatabase.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_21.qadatabase.*;


/**
 * ServiceImpl object for domain model class Locations.
 * @see com.test_21.qadatabase.Locations
 */
@Service("qadatabase.LocationsService")
public class LocationsServiceImpl implements LocationsService {


    private static final Logger LOGGER = LoggerFactory.getLogger(LocationsServiceImpl.class);

    @Autowired
    @Qualifier("qadatabase.LocationsDao")
    private WMGenericDao<Locations, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Locations, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
     public Page<Locations> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "qadatabaseTransactionManager")
    @Override
    public Locations create(Locations locations) {
        LOGGER.debug("Creating a new locations with information: {}" , locations);
        return this.wmGenericDao.create(locations);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "qadatabaseTransactionManager")
    @Override
    public Locations delete(Integer locationsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting locations with id: {}" , locationsId);
        Locations deleted = this.wmGenericDao.findById(locationsId);
        if (deleted == null) {
            LOGGER.debug("No locations found with id: {}" , locationsId);
            throw new EntityNotFoundException(String.valueOf(locationsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Page<Locations> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all locationss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Page<Locations> findAll(Pageable pageable) {
        LOGGER.debug("Finding all locationss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public Locations findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding locations by id: {}" , id);
        Locations locations=this.wmGenericDao.findById(id);
        if(locations==null){
            LOGGER.debug("No locations found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return locations;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "qadatabaseTransactionManager")
    @Override
    public Locations update(Locations updated) throws EntityNotFoundException {
        LOGGER.debug("Updating locations with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "qadatabaseTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


